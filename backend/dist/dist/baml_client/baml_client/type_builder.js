/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/
// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native';
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder';
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals";
export default class TypeBuilder {
    tb;
    PlaygroundDiagramMock;
    PlaygroundDiagramMockList;
    PlaygroundEdge;
    PlaygroundEdgeStyle;
    PlaygroundNode;
    PlaygroundNodeData;
    PlaygroundPosition;
    PlaygroundToolsInput;
    Resume;
    constructor() {
        this.tb = new _TypeBuilder({
            classes: new Set([
                "PlaygroundDiagramMock", "PlaygroundDiagramMockList", "PlaygroundEdge", "PlaygroundEdgeStyle", "PlaygroundNode", "PlaygroundNodeData", "PlaygroundPosition", "PlaygroundToolsInput", "Resume",
            ]),
            enums: new Set([]),
            runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        this.PlaygroundDiagramMock = this.tb.classViewer("PlaygroundDiagramMock", [
            "nodes", "edges", "guardrails", "mcpTools",
        ]);
        this.PlaygroundDiagramMockList = this.tb.classViewer("PlaygroundDiagramMockList", [
            "diagrams",
        ]);
        this.PlaygroundEdge = this.tb.classViewer("PlaygroundEdge", [
            "id", "source", "target", "animated", "style",
        ]);
        this.PlaygroundEdgeStyle = this.tb.classViewer("PlaygroundEdgeStyle", [
            "stroke", "strokeWidth",
        ]);
        this.PlaygroundNode = this.tb.classViewer("PlaygroundNode", [
            "id", "type", "position", "data",
        ]);
        this.PlaygroundNodeData = this.tb.classViewer("PlaygroundNodeData", [
            "label", "color",
        ]);
        this.PlaygroundPosition = this.tb.classViewer("PlaygroundPosition", [
            "x", "y",
        ]);
        this.PlaygroundToolsInput = this.tb.classViewer("PlaygroundToolsInput", [
            "tools",
        ]);
        this.Resume = this.tb.classViewer("Resume", [
            "name", "email", "experience", "skills",
        ]);
    }
    __tb() {
        return this.tb._tb();
    }
    string() {
        return this.tb.string();
    }
    literalString(value) {
        return this.tb.literalString(value);
    }
    literalInt(value) {
        return this.tb.literalInt(value);
    }
    literalBool(value) {
        return this.tb.literalBool(value);
    }
    int() {
        return this.tb.int();
    }
    float() {
        return this.tb.float();
    }
    bool() {
        return this.tb.bool();
    }
    list(type) {
        return this.tb.list(type);
    }
    null() {
        return this.tb.null();
    }
    map(key, value) {
        return this.tb.map(key, value);
    }
    union(types) {
        return this.tb.union(types);
    }
    addClass(name) {
        return this.tb.addClass(name);
    }
    addEnum(name) {
        return this.tb.addEnum(name);
    }
    addBaml(baml) {
        this.tb.addBaml(baml);
    }
}
