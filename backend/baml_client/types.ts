/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface ObtainRulesInput {
  github_readme: string
  
}

export interface PlaygroundDiagramMock {
  nodes: PlaygroundNode[]
  edges: PlaygroundEdge[]
  guardrails: string[]
  mcpTools: string[]
  scan_description: string
  
}

export interface PlaygroundDiagramMockList {
  diagrams: PlaygroundDiagramMock[]
  
}

export interface PlaygroundEdge {
  id: string
  source: string
  target: string
  animated: true
  style: PlaygroundEdgeStyle
  
}

export interface PlaygroundEdgeStyle {
  stroke: string
  strokeWidth: number
  
}

export interface PlaygroundNode {
  id: string
  type: string
  position: PlaygroundPosition
  data: PlaygroundNodeData
  
}

export interface PlaygroundNodeData {
  label: string
  color: string
  
}

export interface PlaygroundPosition {
  x: number
  y: number
  
}

export interface PlaygroundToolsInput {
  tools: string[]
  
}

export interface Resume {
  name: string
  email: string
  experience: string[]
  skills: string[]
  
}

export interface Rule {
  nodes: PlaygroundNode[]
  edges: PlaygroundEdge[]
  guardrail_justification: string[]
  guardrail_code: string[]
  ruleJustification: string
  scan_description: string
  
}

export interface RuleInput {
  tools: string[]
  user_exploit_summary: string
  
}

export interface RuleList {
  diagrams: Rule[]
  
}
