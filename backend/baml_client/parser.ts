/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Collector } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml"
import type { Checked, Check } from "./types.js"
import type { partial_types } from "./partial_types.js"
import type * as types from "./types.js"
import type {ObtainRulesInput, PlaygroundDiagramMock, PlaygroundDiagramMockList, PlaygroundEdge, PlaygroundEdgeStyle, PlaygroundNode, PlaygroundNodeData, PlaygroundPosition, PlaygroundToolsInput, Resume, Rule, RuleInput, RuleInputGithub, RuleList} from "./types.js"
import type TypeBuilder from "./type_builder.js"

export class LlmResponseParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  ExtractResume(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Resume {
    try {
      return this.runtime.parseLlmResponse(
        "ExtractResume",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Resume
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GeneratePlaygroundDiagramMock(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): PlaygroundDiagramMock {
    try {
      return this.runtime.parseLlmResponse(
        "GeneratePlaygroundDiagramMock",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as PlaygroundDiagramMock
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateSingleRule(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): RuleList {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateSingleRule",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as RuleList
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateSixPlaygroundDiagramMocks(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): PlaygroundDiagramMockList {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateSixPlaygroundDiagramMocks",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as PlaygroundDiagramMockList
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateThreePlaygroundDiagramMocks(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): PlaygroundDiagramMockList {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateThreePlaygroundDiagramMocks",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as PlaygroundDiagramMockList
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateToolsList(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): RuleInputGithub {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateToolsList",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as RuleInputGithub
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class LlmStreamParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  ExtractResume(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Resume {
    try {
      return this.runtime.parseLlmResponse(
        "ExtractResume",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Resume
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GeneratePlaygroundDiagramMock(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.PlaygroundDiagramMock {
    try {
      return this.runtime.parseLlmResponse(
        "GeneratePlaygroundDiagramMock",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.PlaygroundDiagramMock
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateSingleRule(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.RuleList {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateSingleRule",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.RuleList
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateSixPlaygroundDiagramMocks(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.PlaygroundDiagramMockList {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateSixPlaygroundDiagramMocks",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.PlaygroundDiagramMockList
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateThreePlaygroundDiagramMocks(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.PlaygroundDiagramMockList {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateThreePlaygroundDiagramMocks",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.PlaygroundDiagramMockList
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateToolsList(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.RuleInputGithub {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateToolsList",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.RuleInputGithub
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}